#new class for businesses in general
class Business:

  def __init__(self, name, franchises):
    self.name = name
    self.franchises = franchises


#creating a Franchise class for more restaurants
class Franchise:
  def __init__(self, address, menus):
    self.address = address
    self.menus = menus
#string representation to allow for differentiation of franchise locations 
  def __repr__(self):
    return "Location: " + self.address
#method designed to take in a time parameter and return what menu objects are available at that time
  def available_menus(self, time):
    available_menu = []
    for menu in self.menus:
      if time >= menu.start_time and time <= menu.end_time:
        available_menu.append(menu)
    return available_menu

#Menu class w/ constructor
class Menu:
  def __init__(self, name, items, start_time, end_time):
    self.name = name
    self.items = items
    self.start_time = start_time
    self.end_time = end_time

#string represenation that gives us a more descriptive string when we call the x_menu objects
  def __repr__(self):
    return self.name + " menu available from " + str(self.start_time) + " - " + str(self.end_time)

#function to check is inputted order is actually on the menu and if so add to bill, then return it
  def calculate_bill(self, purchased_items):
    bill = 0
    for purchased_item in purchased_items:
      if purchased_item in self.items:
        bill += self.items[purchased_item]
    return bill

#x_items are dictionaries containing menu items and x_menu are instances of the Menu class for each meal.
brunch_items = {
  'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50, 'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50
}
brunch_menu = Menu("Brunch", brunch_items, 1100, 1600)

#print(brunch_menu.calculate_bill(['pancakes', 'home fries', 'coffee']))

early_bird_items =  {
  'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00, 'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 1.50, 'espresso': 3.00,
}
early_bird_menu = Menu("Early Bird", early_bird_items, 1500, 1800)

#print(early_bird_menu.calculate_bill(['salumeria plate', 'mushroom ravioli (vegan)']))

dinner_items = {
  'crostini with eggplant caponata': 13.00, 'ceaser salad': 16.00, 'pizza with quattro formaggi': 11.00, 'duck ragu': 19.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00,
}
dinner_menu = Menu("Dinner", dinner_items, 1700, 2300)

kids_items = {
  'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00
}
kids_menu = Menu("Kids", kids_items, 1100, 2100)

menus = [brunch_menu, early_bird_menu, dinner_menu, kids_menu]

#instances of the new Franchise class with address of each franchise and the menus list object above
flagship_store = Franchise("1232 West End Road", menus)
new_installment = Franchise("12 East Mulberry Street", menus)

############################################

#Take a' Arepa section of code

#Arepas franchises
arepas_place = Franchise("189 Fitzgerald Avenue", menus)

#Arepas business menu items
arepas_items = {
  'arepa pabellon': 7.00, 'pernil arepa': 8.50, 'guayanes arepa': 8.00, 'jamon arepa': 7.50
}
arepas_menu = Menu("Arepa menu", arepas_items, 1000, 2000)

#instances of the Business class
basta_fazoolin = Business("Basta Fazoolin' with my Heart", [flagship_store, new_installment])
take_a_arepa = Business("Take a' Arepa", arepas_place)